# frozen_string_literal: true

require './Constants/Constants'
require './Constants/Environments'
require './Managers/MatchManager'

FIREBASE_APP_ID = ENV["FIREBASE_APP_ID_STAGING"]
FIREBASE_TOKEN = ENV["FIREBASE_TOKEN"]

match_manager = MatchManager.new(
  fastlane: self,
  keychain_name: Constants.KEYCHAIN_NAME,
  keychain_password: Constants.KEYCHAIN_PASSWORD,
  is_ci: Environments.CI
)

before_all do
  ensure_bundle_exec
end

default_platform(:ios)

platform :ios do

  # Code Sign

  desc 'Sync AppStore Staging match signing'
  lane :sync_appstore_staging_signing do
    match_manager.sync_app_store_signing(app_identifier: [Constants.BUNDLE_ID_STAGING])
  end

  desc 'Register new devices'
  lane :register_new_device do
    device_name = prompt(text: 'Enter the device name: ')
    device_udid = prompt(text: 'Enter the device UDID: ')
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(force: true)
  end

  # Distribution

  desc 'Build and upload app'
  lane :build_and_upload_app do
    set_app_version
    bump_build
    upload_staging_to_firebase
#     upload_production_to_testflight
  end

  desc 'Build and upload staging to Firebase App Distribution'
  private_lane :upload_staging_to_firebase do
    build_ios_app(
      scheme: 'staging',
      export_method: 'ad-hoc'
    )
    firebase_app_distribution(
        app: #{FIREBASE_APP_ID},
        firebase_cli_token: #{FIREBASE_TOKEN},
        groups: "developer",
    )
  end

  desc 'Build and upload production to TestFlight'
  private_lane :upload_production_to_testflight do
    build_ios_app(
      scheme: 'production',
      export_method: 'app-store'
    )
    upload_to_testflight
  end

  # Private helper lanes

  desc 'check if any specific version number in build environment'
  private_lane :set_app_version do
    # Set up env var MANUAL_VERSION if we need to override the version number
    if (Environments.MANUAL_VERSION || '') != ''
      increment_version_number(
        version_number: Environments.MANUAL_VERSION
      )
    end
  end

  desc 'set build number with number of commits'
  private_lane :bump_build do
    increment_build_number(
      build_number: number_of_commits,
      xcodeproj: Constants.PROJECT_PATH
    )
  end

  desc 'Build app'
  lane :build_ios_app do |values|
    scheme = values[:scheme]
    export_method = values[:export_method]
    build_app(
      configuration: "Debug-#{scheme}",
      scheme: "#{scheme}",
      export_method: "#{export_method}",
      clean: true,
      output_name: "#{scheme}.ipa"
    )
  end
end
